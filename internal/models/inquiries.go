// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Inquiry is an object representing the database table.
type Inquiry struct {
	ID                  string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID              string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Files               string      `boil:"files" json:"files" toml:"files" yaml:"files"`
	Type                int         `boil:"type" json:"type" toml:"type" yaml:"type"`
	Year                int         `boil:"year" json:"year" toml:"year" yaml:"year"`
	Prefix              string      `boil:"prefix" json:"prefix" toml:"prefix" yaml:"prefix"`
	Paid                bool        `boil:"paid" json:"paid" toml:"paid" yaml:"paid"`
	Email               string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	FullName            null.String `boil:"full_name" json:"full_name,omitempty" toml:"full_name" yaml:"full_name,omitempty"`
	GeneratedWithCoupon bool        `boil:"generated_with_coupon" json:"generated_with_coupon" toml:"generated_with_coupon" yaml:"generated_with_coupon"`
	CreatedAt           time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModifiedAt          time.Time   `boil:"modified_at" json:"modified_at" toml:"modified_at" yaml:"modified_at"`

	R *inquiryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L inquiryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InquiryColumns = struct {
	ID                  string
	UserID              string
	Files               string
	Type                string
	Year                string
	Prefix              string
	Paid                string
	Email               string
	FullName            string
	GeneratedWithCoupon string
	CreatedAt           string
	ModifiedAt          string
}{
	ID:                  "id",
	UserID:              "user_id",
	Files:               "files",
	Type:                "type",
	Year:                "year",
	Prefix:              "prefix",
	Paid:                "paid",
	Email:               "email",
	FullName:            "full_name",
	GeneratedWithCoupon: "generated_with_coupon",
	CreatedAt:           "created_at",
	ModifiedAt:          "modified_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var InquiryWhere = struct {
	ID                  whereHelperstring
	UserID              whereHelperstring
	Files               whereHelperstring
	Type                whereHelperint
	Year                whereHelperint
	Prefix              whereHelperstring
	Paid                whereHelperbool
	Email               whereHelperstring
	FullName            whereHelpernull_String
	GeneratedWithCoupon whereHelperbool
	CreatedAt           whereHelpertime_Time
	ModifiedAt          whereHelpertime_Time
}{
	ID:                  whereHelperstring{field: "\"inquiries\".\"id\""},
	UserID:              whereHelperstring{field: "\"inquiries\".\"user_id\""},
	Files:               whereHelperstring{field: "\"inquiries\".\"files\""},
	Type:                whereHelperint{field: "\"inquiries\".\"type\""},
	Year:                whereHelperint{field: "\"inquiries\".\"year\""},
	Prefix:              whereHelperstring{field: "\"inquiries\".\"prefix\""},
	Paid:                whereHelperbool{field: "\"inquiries\".\"paid\""},
	Email:               whereHelperstring{field: "\"inquiries\".\"email\""},
	FullName:            whereHelpernull_String{field: "\"inquiries\".\"full_name\""},
	GeneratedWithCoupon: whereHelperbool{field: "\"inquiries\".\"generated_with_coupon\""},
	CreatedAt:           whereHelpertime_Time{field: "\"inquiries\".\"created_at\""},
	ModifiedAt:          whereHelpertime_Time{field: "\"inquiries\".\"modified_at\""},
}

// InquiryRels is where relationship names are stored.
var InquiryRels = struct {
}{}

// inquiryR is where relationships are stored.
type inquiryR struct {
}

// NewStruct creates a new relationship struct
func (*inquiryR) NewStruct() *inquiryR {
	return &inquiryR{}
}

// inquiryL is where Load methods for each relationship are stored.
type inquiryL struct{}

var (
	inquiryAllColumns            = []string{"id", "user_id", "files", "type", "year", "prefix", "paid", "email", "full_name", "generated_with_coupon", "created_at", "modified_at"}
	inquiryColumnsWithoutDefault = []string{"user_id", "files", "type", "year", "prefix", "paid", "email", "full_name", "generated_with_coupon"}
	inquiryColumnsWithDefault    = []string{"id", "created_at", "modified_at"}
	inquiryPrimaryKeyColumns     = []string{"id"}
)

type (
	// InquirySlice is an alias for a slice of pointers to Inquiry.
	// This should generally be used opposed to []Inquiry.
	InquirySlice []*Inquiry
	// InquiryHook is the signature for custom Inquiry hook methods
	InquiryHook func(context.Context, boil.ContextExecutor, *Inquiry) error

	inquiryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	inquiryType                 = reflect.TypeOf(&Inquiry{})
	inquiryMapping              = queries.MakeStructMapping(inquiryType)
	inquiryPrimaryKeyMapping, _ = queries.BindMapping(inquiryType, inquiryMapping, inquiryPrimaryKeyColumns)
	inquiryInsertCacheMut       sync.RWMutex
	inquiryInsertCache          = make(map[string]insertCache)
	inquiryUpdateCacheMut       sync.RWMutex
	inquiryUpdateCache          = make(map[string]updateCache)
	inquiryUpsertCacheMut       sync.RWMutex
	inquiryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var inquiryBeforeInsertHooks []InquiryHook
var inquiryBeforeUpdateHooks []InquiryHook
var inquiryBeforeDeleteHooks []InquiryHook
var inquiryBeforeUpsertHooks []InquiryHook

var inquiryAfterInsertHooks []InquiryHook
var inquiryAfterSelectHooks []InquiryHook
var inquiryAfterUpdateHooks []InquiryHook
var inquiryAfterDeleteHooks []InquiryHook
var inquiryAfterUpsertHooks []InquiryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Inquiry) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inquiryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Inquiry) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inquiryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Inquiry) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inquiryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Inquiry) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inquiryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Inquiry) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inquiryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Inquiry) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inquiryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Inquiry) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inquiryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Inquiry) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inquiryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Inquiry) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inquiryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInquiryHook registers your hook function for all future operations.
func AddInquiryHook(hookPoint boil.HookPoint, inquiryHook InquiryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		inquiryBeforeInsertHooks = append(inquiryBeforeInsertHooks, inquiryHook)
	case boil.BeforeUpdateHook:
		inquiryBeforeUpdateHooks = append(inquiryBeforeUpdateHooks, inquiryHook)
	case boil.BeforeDeleteHook:
		inquiryBeforeDeleteHooks = append(inquiryBeforeDeleteHooks, inquiryHook)
	case boil.BeforeUpsertHook:
		inquiryBeforeUpsertHooks = append(inquiryBeforeUpsertHooks, inquiryHook)
	case boil.AfterInsertHook:
		inquiryAfterInsertHooks = append(inquiryAfterInsertHooks, inquiryHook)
	case boil.AfterSelectHook:
		inquiryAfterSelectHooks = append(inquiryAfterSelectHooks, inquiryHook)
	case boil.AfterUpdateHook:
		inquiryAfterUpdateHooks = append(inquiryAfterUpdateHooks, inquiryHook)
	case boil.AfterDeleteHook:
		inquiryAfterDeleteHooks = append(inquiryAfterDeleteHooks, inquiryHook)
	case boil.AfterUpsertHook:
		inquiryAfterUpsertHooks = append(inquiryAfterUpsertHooks, inquiryHook)
	}
}

// One returns a single inquiry record from the query.
func (q inquiryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Inquiry, error) {
	o := &Inquiry{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for inquiries")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Inquiry records from the query.
func (q inquiryQuery) All(ctx context.Context, exec boil.ContextExecutor) (InquirySlice, error) {
	var o []*Inquiry

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Inquiry slice")
	}

	if len(inquiryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Inquiry records in the query.
func (q inquiryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count inquiries rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q inquiryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if inquiries exists")
	}

	return count > 0, nil
}

// Inquiries retrieves all the records using an executor.
func Inquiries(mods ...qm.QueryMod) inquiryQuery {
	mods = append(mods, qm.From("\"inquiries\""))
	return inquiryQuery{NewQuery(mods...)}
}

// FindInquiry retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInquiry(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Inquiry, error) {
	inquiryObj := &Inquiry{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"inquiries\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, inquiryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from inquiries")
	}

	return inquiryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Inquiry) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no inquiries provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inquiryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	inquiryInsertCacheMut.RLock()
	cache, cached := inquiryInsertCache[key]
	inquiryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			inquiryAllColumns,
			inquiryColumnsWithDefault,
			inquiryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(inquiryType, inquiryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(inquiryType, inquiryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"inquiries\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"inquiries\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into inquiries")
	}

	if !cached {
		inquiryInsertCacheMut.Lock()
		inquiryInsertCache[key] = cache
		inquiryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Inquiry.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Inquiry) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	inquiryUpdateCacheMut.RLock()
	cache, cached := inquiryUpdateCache[key]
	inquiryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			inquiryAllColumns,
			inquiryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update inquiries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"inquiries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, inquiryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(inquiryType, inquiryMapping, append(wl, inquiryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update inquiries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for inquiries")
	}

	if !cached {
		inquiryUpdateCacheMut.Lock()
		inquiryUpdateCache[key] = cache
		inquiryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q inquiryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for inquiries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for inquiries")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InquirySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inquiryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"inquiries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, inquiryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in inquiry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all inquiry")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Inquiry) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no inquiries provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inquiryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	inquiryUpsertCacheMut.RLock()
	cache, cached := inquiryUpsertCache[key]
	inquiryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			inquiryAllColumns,
			inquiryColumnsWithDefault,
			inquiryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			inquiryAllColumns,
			inquiryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert inquiries, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(inquiryPrimaryKeyColumns))
			copy(conflict, inquiryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"inquiries\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(inquiryType, inquiryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(inquiryType, inquiryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert inquiries")
	}

	if !cached {
		inquiryUpsertCacheMut.Lock()
		inquiryUpsertCache[key] = cache
		inquiryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Inquiry record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Inquiry) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Inquiry provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), inquiryPrimaryKeyMapping)
	sql := "DELETE FROM \"inquiries\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from inquiries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for inquiries")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q inquiryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no inquiryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from inquiries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for inquiries")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InquirySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(inquiryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inquiryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"inquiries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, inquiryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from inquiry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for inquiries")
	}

	if len(inquiryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Inquiry) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInquiry(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InquirySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InquirySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inquiryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"inquiries\".* FROM \"inquiries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, inquiryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InquirySlice")
	}

	*o = slice

	return nil
}

// InquiryExists checks if the Inquiry row exists.
func InquiryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"inquiries\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if inquiries exists")
	}

	return exists, nil
}
